# matrix 실습
x1 <-matrix(1:8, nrow = 2) #행의 갯수는 2개이다.
x1
x1<-x1*3
x1

sum(x1); min(x1);max(x1);mean(x1)

x2 <-matrix(1:8, nrow =3) #행의 갯수가 모자랄 경우 반복이 된다.
x2
#에러는 수행 조차 안하지만 경고는 수행은 하고 알리게된다.

(chars <- letters[1:10])
#이렇게 ()로 묶어주면 대입과 출력을 동시에 해준다.

mat1 <-matrix(chars) # 아무것도 안주면 1열의 매트릭스가 생성된다.
mat1; dim(mat1) # dim이라는 함수를 이용하면 몇행 몇열인지 바로 알 수 있다.
matrix(chars, nrow=1)
matrix(chars, nrow=5)
matrix(chars, nrow=5, byrow=T)
matrix(chars, ncol=5)
matrix(chars, ncol=5, byrow=T)
matrix(chars, nrow=3, ncol=5)
matrix(chars, nrow=3)


vec1 <- c(1,2,3)
vec2 <- c(4,5,6)
vec3 <- c(7,8,9)
mat1 <- rbind(vec1,vec2,vec3); mat1
mat2 <- cbind(vec1,vec2,vec3); mat2
mat1[1,1]
mat1[2,];mat1[,3]
mat1[1,1,drop=F] 
# drop 이라는 속성을 사용하면 matrix 구조를 유지하여 가져온다.
# drop의 default 값은 TRUE이다.
mat1[2,,drop=F];mat1[,3,drop=F]

rownames(mat1) <- NULL
colnames(mat2) <- NULL
mat1;mat2
rownames(mat1) <- c("row1","row2","row3")
colnames(mat1) <- c("col1","col2","col3")
mat1

ls()
mean(x2)
sum(x2)
min(x2)
max(x2)
summary(x2)

mean(x2[2,])
sum(x2[2,])
rowSums(x2); colSums(x2)
#행마다 합계, 열마다 합계

# apply 함수가 이를 대체 할 수 있다.(적용해라 이런 뜻)
apply(x2, 1, sum); apply(x2, 2, sum)
#여기서 1은 행단위, 2는 열단위로 수행하라는 말이다.

?apply
apply(x2, 1, max) #x2 matrix의 행단위로의 최댓값
apply(x2, 1, min) #x2 matrix의 행단위로의 최솟값
apply(x2, 1, mean) #x2 matrix의 행단위로의 평균값

apply(x2, 2, max) #x2 matrix의 열단위로의 최댓값
apply(x2, 2, min) #x2 matrix의 열단위로의 최솟값
apply(x2, 2, mean) #x2 matrix의 열단위로의 평균값

#Array 실습
a1 <- array(1:30, dim=c(2,3,5))
#2행 3열 5층짜리 배열을 만들어라 (1부터 30까지)
a1

a1[1,3,4];a1[1,3,4, drop=F]
a1[,,3]
a1[,2,]
a1[1,,]

###################################################
#wd 는 Working Directory의 준말이다.
getwd()

# factor 실습
#(정해진 범주의 값만 저장할 수 있는 벡터 = 팩터)

score <- c(1,3,2,4,2,1,3,5,1,3,3,3)
class(score)
summary(score)

f_score <- factor(score)
class(f_score)
f_score

summary(f_score)
# 1이라는 데이터가 몇개, 2라는 데이터가 몇개 등 각각의 데이터의 갯수를 새준다.
# 연산할 수 있는 수치데이터가 아닌 범주 데이터로 보기 때문.
levels(f_score)

plot(score)
plot(f_score)


data1 <- c("월","수","토","월",
           "목","화")
data1
class(data1)
summary(data1)
day1 <- factor(data1)
day1
class(day1)
summary(day1)
levels(day1) # 금과 일은 데이터에 없기때문에 빠져서 레벨이 나오게 된다.

week.korabbname <- c("일", "월", "화",
                     "수", "목", "금", "토")
day2 <- factor(data1, 
               levels=week.korabbname)
#levels에 지정을 해주었다.
day2
summary(day2)
levels(day2)



btype <- factor(
  c("A", "O", "AB", "B", "O", "A"), 
  levels=c("A", "B", "O"))
btype
summary(btype)
#levels가 우선순위가 높기에 "AB"는 결측치인 Not Avaliable로 나타나게 된다.
levels(btype)

gender <- factor(c(1,2,1,1,1,2,1,2), 
                 levels=c(1,2), 
                 labels=c("남성", "여성"))
#label은 매핑되는 순서대로 1="남성", 2="여성"으로 사용하게 된다.
gender
summary(gender)
levels(gender)

# 내장 데이터셋
data()
iris; head(iris);tail(iris)
View(iris) # 엑셀처럼 만들어서 보여주게 된다.
str(iris) # 스트럭쳐라는 의미의 함수인 str은 모든 구조를 다 보여준다.
#수행했을때 variables는 변수의 갯수를 알려주는 역할을 한다.

library()
#Dataframe 실습
no <- c(1,2,3,4)
name <- c('Apple','Banana','Peach','Berry')
qty <- c(5,2,7,9)
price <- c(500,200,200,500)
fruit <- data.frame(no, name, qty, price)
#name의 경우 캐릭터 벡터 이므로 자동으로 팩터로 인식하게 된다.
str(fruit)
View(fruit)

fruit[1,]
fruit[-1,]
fruit[,2]
fruit[,3] # fruit[,3, drop=F]
fruit[, c(3,4)]
fruit[3,2]
fruit[3,1]

fruit[,3]
fruit$qty # 얘가 가독성이 좋으므로 가급적 이걸 쓰자.
fruit[[3]]
fruit[3]  # 데이터프레임 형식 유지

str(fruit$qty)
str(fruit[3])

# dataframe exam1
english <- c(90, 80, 60, 70)
math <- c(50, 60, 100, 20)
classnum <- c(1,1,2,2)
df_midterm <- data.frame(
  english, math, classnum)
df_midterm
str(df_midterm)
colnames(df_midterm)
rownames(df_midterm)
names(df_midterm) # 얘는 colnames랑 동일하다.
mean(df_midterm$english)
mean(df_midterm$math)

df_midterm2 <- data.frame(
  c(90, 80, 60, 70), 
  c(50, 60, 100, 20), 
  c(1,1,2,2))
colnames(df_midterm2)
rownames(df_midterm2)
names(df_midterm2)
df_midterm2
df_midterm2 <- data.frame(
  영어=c(90, 80, 60, 70), # 컬럼명이 이상하게 되는 것을 막기 위해 이런식으로 컬럼명을 지정하면서 생성 가능하다.
  수학=c(50, 60, 100, 20), 
  클래스=c(1,1,2,2))
df_midterm2
df_midterm2$영어

df <- data.frame(var1=c(4,3,8), 
                 var2=c(2,6)) # 오류, 갯수가 안맞아서 에러가난다.
df <- data.frame(var1=c(4,3,8), 
                 var2=c(2,6,1))
str(df)
df$var_sum <- df$var1 + df$var2 # 이런식으로 df에 새로운 변수를 행단위로 추가해 넣어줄 수 있다.
df$var_mean <- df$var_sum/2
df$result <- ifelse(df$var1>df$var2, 
                    "var1이 크다", "var1이 작다")
#ifelse는 3항연산자와 기능이 똑같다.
#ifelse(조건, 조건이 참일 때 처리할 명령문1, 조건이 거짓일 때 처리할 명령문2)

getwd() # setwd('xxx')

#csv파일열기
score <- read.csv("data/score.csv")
#csv를 읽을때는 read.csv를 사용한다.
score
str(score)
score$sum <- 
  score$math+score$english+score$science
score$result <- ifelse(score$sum >= 200, 
                       "pass", "fail")
score

summary(score$result) #팩터가 아니여서 그냥 전체 갯수만 세어버린다.
table(score$result)
summary(factor(score$result)) #따라서 팩터로 만든 다음에 summary해야한다.
score$result = factor(score$result) # 언제부턴가 '<-' 말고 '='도 지원한다.
str(score)
summary(score)
score$id = as.character(score$id)
score$class = factor(score$class)

score$grade<-ifelse(score$sum >= 230,"A",
                    ifelse(score$sum >= 215,"B", 
                           ifelse(score$sum >=200,"C","D")))
score

# order() 와 sort()
v <- c(10,3,7,4,8)
sort(v)
order(v)

emp <- read.csv(file.choose(),stringsAsFactors = F)
emp
str(emp)

# emp에서 직원 이름
emp$ename
emp[,2]
emp[,"ename"]
emp[,2, drop=FALSE] 
emp[,"ename",drop=F] 
emp[2]  #데이타프레임 구조이다.
emp["ename"] #데이타프레임 구조이다.

# emp에서 직원이름, 잡, 샐러리
emp[,c(2,3,6)]
emp[,c("ename","job","sal")]
subset(emp,select = c(ename, job, sal))
?subset

# emp에서 1,2,3 행 들만
emp[1:3,]
emp[c(1,2,3),]
?head
head(emp)
head(emp, n=1)

# ename이 "KING"인 직원의 모든 정보
emp[9,] 
emp$ename=="KING"
emp[c(F,F,F,F,F,F,F,F,T,F,F,F,
      F,F,F,F,F,F,F,F),]
emp[emp$ename=="KING",] #sql에서 where절 같은 느낌이다.
subset(emp,subset=emp$ename=="KING")
subset(emp,emp$ename=="KING") 

# 커미션을 받는 직원들의 모든 정보 출력
emp[!is.na(emp$comm),]  #na값은 등가연산으로 비교할수 없으므로, is.na를 수행하여 비교한다.
subset(emp,!is.na(emp$comm)) 
View(emp)

# select ename,sal from emp where sal>=2000
subset(emp, select=c("ename","sal"), #select에 추출하고자 하는 열
       subset= emp$sal>= 2000)
subset(emp, emp$sal>= 2000,
       c("ename","sal"))
emp[emp$sal>=2000,c("ename","sal")]

# select ename,sal from emp where sal between 2000 and 3000
subset(emp, select=c("ename","sal"), subset=(sal>=2000 & sal<=3000))
emp[emp$sal>=2000 & emp$sal <=3000, c("ename","sal")]


###############################################
y <- c(0,25,50,75,100)
z <- c(50, 50, 50, 50,50)
y == z
y != z
y > z
y < z
y >= z
y <= z
y == 50 # c(50, 50, 50, 50, 50)
y > 50

num1 <- 11 # c(11)
num2 <- 3  # c(3)
num1 / num2  #나눗셈
num1 %% num2  #나눗셈 나머지만
num1 %/% num2  #나눗셈 몫만