# 날짜와 시간 관련 기능을 지원하는 함수들

Sys.Date() # 현재 날짜 년,월,일일
Sys.time() # 현재 날짜 및 시간

class(Sys.Date())
class(Sys.time())

as.Date("2020-04-15")
as.Date("2020/04/15")
as.Date("2020,04,15") # 이런식으로 설정하는것은 에러가 난다.
as.Date("15-04-2020") # 앞의자리가 무조건 연도이고 00을 붙인다.
as.Date("20-04-151")

#이런식으로 매개변수 순서와 포맷을 지정해 줄 수 있다.
as.Date("2020,04,15", format="%Y,%m,%d")
as.Date("15-04-2020", format="%d-%m-%Y")


(today <- Sys.Date())
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년") #%B는 04월을 4월로 출력하여준다.
format(today, "%y") # 소문자 y는 연도의 끝2자리 
format(today, "%Y") # 대문자 Y는 연도의 4자리
format(today, "%B")
format(today, "%b")
format(today, "%m")
format(today, "%a") # 소문자 a는 '?'요일을 출력
format(today, "%A") # 대문자 A는 '?요일'을 출력
weekdays(today) 
months(today) 

Sys.setlocale("LC_TIME","English") #환경 변수를 영어로 변경
Sys.setlocale() #다시 한국어로 변경

quarters(today) #1년의 분기를 나타내어 준다.
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
Sys.Date()
Sys.time()
Sys.timezone()

as.Date('1/15/2018',format='%m/%d/%Y') # format 은 생략 가능
as.Date('4월 26, 2018',format='%B %d, %Y') # %B 월을 뽑긴 하는데 
as.Date('110228',format='%d%b%y') #b는 앞의 '0'을 인식하지 못한다.
as.Date('110228',format='%d%m%y') #m은 앞의 '0'을 인식한다.

x1 <- "2019-01-10 13:30:41"

# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S") 

# 문자열을 날짜+시간형으로
?strptime
strptime(x1, "%Y-%m-%d %H:%M:%S") # format 문자열 지정은 필수
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")


start <- as.Date("2020-01-01")
end <- as.Date("2021-01-01")
seq(start, end, 1) # 1일 간격으로 처음과 끝사이를 출력한다.
seq(start, end, "day") # day도 1일 간격
seq(start, end, "week") # week는 1주일 간격
seq(start, end, "month") # month는 1달 간격
seq(start, end, "year") # year는 1년 간격
seq(start, end, "3 month") # 3달 간격
seq(start, end, length.out=7) # length.out 간격으로 나누어 준다.


x2 <- "20200601"
as.Date(x2, "%Y%m%d")
datetime<-strptime(x2, "%Y%m%d")
str(datetime)

# Date 객체는 날짜만 나타낼 수 있으며 시간처리 불가
# 날짜와 시간을 함께 처리하려면 POSIXct 또는 POSIXlt 타입의 객체 사용

pct <- as.POSIXct("2020/04/15 11:30:20")
plt <- as.POSIXlt("2020/04/15 11:30:20")
pct
plt
class(pct)
class(plt)
as.integer(pct) # ?
as.integer(plt) # ?
unclass(plt) # ?
plt$sec
plt$min
plt$hour
plt$mday
plt$mon # 0 - 1월
plt$year # + 1900
plt$wday # 0-일요일



t<-Sys.time()
ct<-as.POSIXct(t)
lt<-as.POSIXlt(t)
str(ct) 
str(lt) 
unclass(ct) 
unclass(lt) 
lt$mon+1
lt$hour
lt$year+1900
as.POSIXct(1449994438,origin="1970-01-01")
as.POSIXlt(1449994438,origin="1970-01-01")


#올해의 크리스마스 요일 2가지방법(요일명,숫자)
christmas2<-as.POSIXlt("2020-12-25")
weekdays(christmas2)
christmas2$wday
#2020년 1월 1일 어떤 요일
tmp<-as.POSIXct("2020-01-01")
weekdays(tmp)
#오늘은 xxxx년x월xx일x요일입니다 형식으로 출력
tmp<-Sys.Date()
format(tmp,'오늘은 %Y년 %B %d일 %A입니다')
year<-format(tmp,'%Y')
month<-format(tmp,'%m')
day<-format(tmp,'%d')
weekday<-format(tmp,'%A')
paste("오늘은 ",year,"년 ",month,"월 ",day,"일 ",weekday," 입니다.",sep="")

as.Date("2020/01/01 08:00:00") - as.Date("2020/01/01 05:00:00")
as.POSIXct("2020/01/01 08:00:00") - as.POSIXct("2020/01/01 05:00:00")
as.POSIXlt("2020/01/01 08:00:00") - as.POSIXlt("2020/01/01 05:00:00")


# 문자열 처리 관련 주요 함수들

x <- "We have a dream"
nchar(x)
length(x)

y <- c("We", "have", "a", "dream")
length(y)
nchar(y)

letters
sort(letters, decreasing=TRUE)

fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says) # 전부 소문자로 바꾼다.
toupper(fox.says) # 전부 대문자로 바꾼다.

substr("Data Analytics", start=1, stop=4)
substr("Data Analytics", 6, 14)
substring("Data Analytics", 6)

classname <- c("Data Analytics", "Data Mining", "Data Visualization")
substr(classname, 1, 4)

countries <- c("Korea, KR", "United States, US", "China, CN")
substr(countries, nchar(countries)-1, nchar(countries))

head(islands)
landmesses <- names(islands)
landmesses
grep(pattern="New", x=landmesses)

index <- grep("New", landmesses)
landmesses[index]
# 동일
grep("New", landmesses, value=T)


txt <- "Data Analytics is useful. Data Analytics is also interesting."
sub(pattern="Data", replacement="Business", x=txt) # 문장에서 처음 한개만 바뀐다.
gsub(pattern="Data", replacement="Business", x=txt) # 문장에서 전체가 다 바뀐다.

x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
gsub(".csv", "", x)

words <- c("ct", "at", "bat", "chick", "chae", "cat", "cheanomeles", "chase", "chasse", "mychasse", "cheap", "check", "cheese", "hat", "mycat")

# grep 명령어
grep("che", words, value=T)
grep("at", words, value=T)
grep("[ch]", words, value=T) # ?
grep("[at]", words, value=T) # ?
grep("ch|at", words, value=T) # ?
grep("ch(e|i)ck", words, value=T)
grep("chase", words, value=T)
grep("chas?e", words, value=T)
grep("chas*e", words, value=T)
grep("chas+e", words, value=T)
grep("ch(a*|e*)se", words, value=T)
grep("^c", words, value=T)
grep("t$", words, value=T)
grep("^c.*t$", words, value=T)

words2 <- c("12 Dec", "OK", "http//", 
            "<TITLE>Time?</TITLE>", 
            "12345", "Hi there")

grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:alpha:]]", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("\\d", words2, value=TRUE)
grep("\\s", words2, value=TRUE)



fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split=" ")
strsplit(x= fox.said, split="")

fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p2 <- "One runs the risk of weeping a little, if one lets himself be tamed"
p3 <- "What makes the desert beautiful is that somewhere it hides a well"
littleprince <- c(p1, p2, p3)
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]] 
strsplit(littleprince, " ")[[3]][5]


# dplyr 패키지를 학습하자....

install.packages("dplyr") 
library(dplyr)
install.packages("ggplot2")
str(ggplot2::mpg)
head(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
exam <- read.csv("data/csv_exam.csv")
str(exam)
dim(exam)
head(exam);tail(exam)
View(exam)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반이 아닌 경우
exam %>% filter(class != 1)
# 3반이 아닌 경우
exam %>% filter(class != 3)
# 수학 점수가 50점을 초과한 경우
exam %>% filter(math > 50)
# 수학 점수가 50점 미만인 경우
exam %>% filter(math < 50)
# 영어점수가 80점 이상인 경우
exam %>% filter(english >= 80)
# 영어점수가 80점 이하인 경우
exam %>% filter(english <= 80)
# 1반 이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 2반 이면서 영어점수가 80점 이상인 경우
exam %>% filter(class == 2 & english >= 80)
# 수학 점수가 90점 이상이거나 영어점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# 영어점수가 90점 미만이거나 과학점수가 50점 미만인 경우
exam %>% filter(english < 90 | science < 50)
# 목록에 해당되는 행 추출하기
exam %>% filter(class == 1 | class == 3 | class == 5)  # 1, 3, 5 반에 해당되면 추출
# %in% 연산자 이용하기
exam %>% filter(class %in% c(1,3,5))  # 1, 3, 5 반에 해당하면 추출
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기

#select함수는 select절에 주어지는 컬럼명의 데이타 프레임이 생략된다. 즉, exam$math라고 쓸 필요가 없다.
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 변수 제외하기
exam %>% select(-math)  # math 제외
exam %>% select(-math, -english)  # math, english 제외
# dplyr 함수 조합하기
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성 있게 줄 바꾸기
exam %>% #  %>%는 절대 앞에 올수 없다. 즉, 다음행이 아닌 그행의 마지막에 적어주어야함. 
        # %>% 은 Ctrl+Shift+M을 누르면 단축키이다! 
  filter(class == 1) %>%  # class가 1인 행 추출
  select(english)         # english 추출
# 일부만 출력하기
exam %>%
  select(id, math) %>%  # id, math 추출
  head                  # 앞부분 6행까지 추출(head함수는 따로 값을 지정 안하면 6개를 뽑아온다.)
# 일부만 출력하기
exam %>%
  select(id, math) %>%  # id, math 추출
  head(10)              # 앞부분 10행까지 추출

iris %>% pull(Species) # pull은 vector로 꺼내준다.
iris %>% select(Species) # select는 data.frame으로 꺼내준다.
iris %>% select_if(is.numeric) # numeric만 해당하는 열을 꺼내달라.
iris %>% select(-Sepal.Length, -Petal.Length)

View(iris)
# Select column whose name starts with "Petal" / ~로 시작하는
iris %>% select(starts_with("Petal"))

# Select column whose name ends with "Width" / ~로 끝나는
iris %>% select(ends_with("Width"))

# Select columns whose names contains "etal" / ~를 포함하는
iris %>% select(contains("etal"))

# Select columns whose name maches a regular expression / ~를 포함하는 칼럼명
iris %>% select(matches(".t."))


# 오름차순으로 정렬하기
exam %>% arrange(math)  # math 오름차순 정렬
# 내림차순으로 정렬하기
exam %>% arrange(desc(math))  # math 내림차순 정렬
# 정렬 기준 변수 여러개 지정
exam %>% arrange(desc(class), desc(math))  # class 및 math 오름차순 정렬
exam %>% arrange(desc(math)) %>% head(1) # 수학점수가 가장 높은 학생

exam %>%   #mutate는 없었던 새로운 변수를 추가하는 것이다.
  mutate(total = math + english + science) %>%  # 총합 변수 추가
  head                                          # 일부 추출
#여러 파생변수 한 번에 추가하기
exam %>% # 이런식으로 mutate에 몇개든 새로 추가 하고자 하는 변수를 만들어줄 수 있다.
  mutate(total = math + english + science,          # 총합 변수 추가
         mean = (math + english + science)/3) %>%   # 총평균 변수 추가
  head     
exam %>%
  mutate(total = math + english + science,          # 총합 변수 추가
         mean = total/3) %>%   # 총평균 변수 추가
  head 

# 일부 추출
# mutate()에 ifelse() 적용하기
exam %>%
  mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
  head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
  mutate(total = math + english + science) %>%  # 총합 변수 추가
  arrange(total) %>%                            # 총합 변수 기준 정렬
  head                                          # 일부 추출
# ---> 못한 학생 순서대로 6명이 나오게 될 것이다.