trrr
#name 이라는 클래스 속성을 갖는 <tr> 태그의 컨텐츠
nodetr <- html_nodes(text, "tr[class = name]")
trrr <- html_text(nodetr)
trrr
#target 이라는 아이디 속성을 갖는 <td> 태그의 컨텐츠
nodetd <- html_nodes(text, "td[id = target]")
tddd <- html_text(nodetd)
tddd
text<- NULL
url<- "http://movie.naver.com/movie/point/af/list.nhn?page=1"
text <- read_html(url,  encoding="CP949")
text
# 영화제목
nodes <- html_nodes(text, ".movie")
title <- html_text(nodes)
title
# 영화평점
nodes <- html_nodes(text, ".title em")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, xpath="//*[@id='old_content']/table/tbody/tr/td[2]/text()")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
# 영화리뷰
nodes <- html_nodes(text, xpath="//*[@id='old_content']/table/tbody/tr/td[2]/text()")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
if(length(review) == 10) {
page <- cbind(title, point)
page <- cbind(page, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=127122&type=netizen"
text <- read_html(url,  encoding="CP949")
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
url<- "https://movie.daum.net/moviedb/main?movieId=127122&type=netizen"
text <- read_html(url,  encoding="CP949")
text
url<- "https://movie.daum.net/moviedb/main?movieId=127122&type=netizen"
text <- read_html(url,  encoding="CP949")
text
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url,  encoding="CP949")
text
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url,  encoding="CP949")
text
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url,  encoding="CP949")
text
text<- NULL
text
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > p")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
if(length(review) == 10) {
page <- cbind(page, review)
write.csv(page, "movie_reviews5.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
nodes
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
nodes
nodes
point <- html_text(nodes)
point
if(length(review) == 10) {
page <- cbind(title, point)
page <- cbind(page, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
text<- NULL
url<- "http://movie.naver.com/movie/point/af/list.nhn?page=1"
text <- read_html(url,  encoding="CP949")
text
# 영화제목
nodes <- html_nodes(text, ".movie")
# 영화제목
nodes <- html_nodes(text, ".movie")
title <- html_text(nodes)
title
# 영화평점
nodes <- html_nodes(text, ".title em")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, xpath="//*[@id='old_content']/table/tbody/tr/td[2]/text()")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0] #nchr은 문자열 길이를 추출한다.
# 내용이 없는 것은 빼고 내용이 있는것만 review 변수에 다시 담고있다.
review
if(length(review) == 10) {
page <- cbind(title, point)
page <- cbind(page, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=127122"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
nodes
# 영화평점
nodes <- html_nodes(text, xpath = "//*[@id=\"mainGradeDiv\"]/ul/li/div/div[1]/em")
point <- html_text(nodes)
point
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, xpath = "//*[@id=\"mainGradeDiv\"]/ul/li/div/div[1]/em")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, xpath = "//*[@id=\"mainGradeDiv\"]/ul/li/div/div/em")
nodes
point <- html_text(nodes)
point
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, xpath = "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
text
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url, encoding="CP949")
text
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
View(nodetable)
View(nodes)
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul.list_review list_netizen > li > div > div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "#mainGradeDiv > ul.list_review list_netizen > li > div > div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "em")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "div.raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
# 영화리뷰
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > ul > li > div > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > ul > * > * > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > * > * > * > div.raking_grade > em")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > * > * > * > * > em")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > * > * > * > * > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "#mainGradeDiv > * > * > * > * > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점 #mainGradeDiv > ul > li:nth-child(2) > div > div.raking_grade > em
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
text<- NULL
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".ranking_grade em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".ranking_grade em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".raking_grade em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".raking_grade em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".raking_grade > em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".raking_grade > em.emph_grade")
point <- html_text(nodes)
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
url<- "https://movie.daum.net/moviedb/main?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text, "em.emph_grade")
point <- html_text(nodes)
point
# 영화평점
nodes <- html_nodes(text, ".emph_grade")
point <- html_text(nodes)
point
if(length(review) == 10) {
page <- cbind(point, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
# 영화평점
nodes <- html_nodes(text,".emph_grade")
nodes
text<- NULL
url<- "https://movie.daum.net/moviedb/grade?movieId=131576"
text <- read_html(url)
text
# 영화평점
nodes <- html_nodes(text,".emph_grade")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
if(length(review) == 10) {
page <- cbind(point, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
# 영화평점
nodes <- html_nodes(text,".emph_grade")
point <- html_text(nodes)
point
# 영화리뷰
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
review
if(length(review) == 10) {
page <- cbind(point, review)
write.csv(page, "movie_reviews.csv")
} else {
cat("리뷰글이 생략된 데이터가 있네요ㅜㅜ\n")
}
page <- cbind(point, review)
write.csv(page, "movie_reviews.csv")
# 여러 페이지
site<- "http://movie.naver.com/movie/point/af/list.nhn?page="
text <- NULL
movie.review <- NULL
install.packages("XML")
site<- "https://movie.daum.net/moviedb/grade?movieId=127122&type=netizen&page="
text <- NULL
movie.review <- NULL
for(i in 1: 20) {
url <- paste(site, i, sep="")
text <- read_html(url)
nodes <- html_nodes(text, ".emph_grade")
point <- html_text(nodes)
nodes <- html_nodes(text, "p.desc_review")
imsi <- html_text(nodes, trim=TRUE)
review <- imsi[nchar(imsi) > 0]
page <- cbind(point, review)
movie.review <- rbind(movie.review, page)
}
write.csv(movie.review, "daummovie2.csv")
text<- NULL
url<- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# newstitle
nodes <- html_nodes(text,"strong > a.link_txt")
newstitle <- html_text(nodes)
newstitle
# newspapername
nodes <- html_nodes(text, "span.link_txt")
newspapername <- html_text(nodes, trim=TRUE)
newspapername <- imsi[nchar(imsi) > 0]
newspapername
newspapername
# newspapername
nodes <- html_nodes(text, "span.link_txt")
newspapername <- html_text(nodes, trim=TRUE)
newspapername
# newspapername
nodes <- html_nodes(text, "span.info_news")
newspapername <- html_text(nodes, trim=TRUE)
newspapername
url<- "http://media.daum.net/ranking/popular/"
text <- read_html(url)
text
# newstitle
nodes <- html_nodes(text,"strong > a.link_txt")
newstitle <- html_text(nodes)
newstitle
page <- data.frame(newstitle, newspapername)
# newstitle
nodes <- html_nodes(text,"a.link_txt")
newstitle <- html_text(nodes)
newstitle
# newstitle
nodes <- html_nodes(text,"a.link_txt")
newstitle <- html_text(nodes)
newstitle
# newstitle
nodes <- html_nodes(text,"#mArticle > div.rank_news > ul.list_news2 > li > div.cont_thumb > strong > a.link_txt")
newstitle <- html_text(nodes)
newstitle
page <- data.frame(newstitle, newspapername)
page
write.csv(page, "daumnews.csv")
install.packages("rvest")
library(rvest)
url <- "http://unico2013.dothome.co.kr/crawling/tagstyle.html"
text <- read_html(url)  #html_document라는 객체를 리턴하고 있다.
text  #리스트로 객체처럼 만들고 있다.
str(text)
nodes <- html_nodes(text, "div")
nodes
title <- html_text(nodes) #html은 컨텐츠를 읽어준다. JavaScript의 innerHTML 같은 느낌.
title
# 한국일보 페이지(XML 패키지 사용)
install.packages("XML")
library(XML)
imsi <- read_html("http://hankookilbo.com")
t <- htmlParse(imsi)
content<- xpathSApply(t,"//p[@class='title']", xmlValue);
content
# httr 패키지 사용 - GET 방식 요청
install.packages("httr")
install.packages("httr")
library(httr)
http.standard <- GET('http://www.w3.org/Protocols/rfc2616/rfc2616.html')
title2 = html_nodes(read_html(http.standard), 'div.toc h2')
title2 = html_text(title2)
title2
library(httr)
http.standard <- GET('http://www.w3.org/Protocols/rfc2616/rfc2616.html')
title2 = html_nodes(read_html(http.standard), 'div.toc h2')
title2 = html_text(title2)
title2
library(rvest)
library(XML)
http.standard <- GET('http://www.w3.org/Protocols/rfc2616/rfc2616.html')
title2 = html_nodes(read_html(http.standard), 'div.toc h2')
title2 = html_text(title2)
title2
# httr 패키지 사용 - POST 방식 요청
library(httr)
# POST 함수를 이용해 모바일 게임 랭킹 3월 15일 주  모바일 게임 랭킹을 찾는다
#(http://www.gevolution.co.kr/score/gamescore.asp?t=3&m=0&d=week)
game = POST('http://www.gevolution.co.kr/score/gamescore.asp?t=3&m=0&d=week',
encode = 'form', body=list(txtPeriodW = '2020-03-15'))
title2 = html_nodes(read_html(game), 'a.tracktitle')
title2 = html_text(title2)
title2[1:10]
# 뉴스, 게시판 등 글 목록에서 글의 URL만 뽑아내기
res = GET('https://news.naver.com/main/list.nhn?mode=LSD&mid=sec&sid1=001')
htxt = read_html(res)
link = html_nodes(htxt, 'div.list_body a'); length(link)
article.href = unique(html_attr(link, 'href'))
article.href
