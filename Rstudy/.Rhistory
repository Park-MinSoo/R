"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
cat("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term, sep="\n"
)
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term, sep="
"
)
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc)
df <- xmlToDataFrame(getNodeSet(doc, "//itemList"))
#View(df)
busRouteId <- df$busRouteId[1]
length <- df$length[1]
stStationNm <- df$stStationNm[1]
edStationNm <- df$edStationNm[1]
term <- df$term[1]
#bus360 <- data.frame(
#           "노선 ID : " = busRouteId,
#          "노선 길이 : " = length,
#         "기점 : " = stStationNm,
#        "종점 : " = edStationNm,
#       "배차간격 : " = term
#)
#bus360
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
searchUrl<- "https://openapi.naver.com/v1/search/news.JSON"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue);
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
text
searchUrl<- "https://openapi.naver.com/v1/search/news.JSON"
Client_ID <- "izGsqP2exeThwwEUVU3x"
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue);
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue);
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
url <- paste0(searchUrl, "?query=", query, "&display=100")
url
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
url
# 네이버 뉴스 연동
searchUrl<- "https://openapi.naver.com/v1/search/news.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("코로나","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
url
# 네이버 뉴스 연동
searchUrl<- "https://openapi.naver.com/v1/search/news.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("코로나","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
url
# 네이버의 블로그에서 “맛집” 이라는 단어가 들어간 글들을 검색하여 100개까지 추출한 다음 naverblog.txt 파일로 저장
library(XML)
rm(list=ls())
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("맛집","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
url
rm(list=ls())
searchUrl<- "https://openapi.naver.com/v1/search/blog.xml"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("맛집","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/xml",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 블로그 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue)
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
doc2 <- htmlParse(doc, encoding="UTF-8")
text<- xpathSApply(doc2, "//item/description", xmlValue);
text
text <- gsub("</?b>", "", text)
text <- gsub("&.+t;", "", text)
text
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
response <- GET(url)
json_data <- content(response, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
df <- gsub("</?b>", "", text)
df <- gsub("&.+t;", "", text)
df
doc
url
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
# 네이버 뉴스 내용에 대한 리스트 만들기
response <- GET(url)
json_data <- content(response, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
df <- gsub("</?b>", "", text)
df <- gsub("&.+t;", "", text)
df
df
df <- data.frame(json_obj)
df
df <- gsub("</?b>", "", df)
df <- gsub("&.+t;", "", df)
df
searchUrl<- "https://openapi.naver.com/v1/search/news.json"
Client_ID <- "izGsqP2exeThwwEUVU3x"
Client_Secret <- "WrwbQ1l6ZI"
query <- URLencode(iconv("빅데이터","euc-kr","UTF-8"))
url <- paste0(searchUrl, "?query=", query, "&display=100")
doc <- GET(url, add_headers("Content_Type" = "application/json",
"X-Naver-client-Id" = Client_ID, "X-naver-Client-Secret" = Client_Secret))
# 네이버 뉴스 내용에 대한 리스트 만들기
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
View(df)
df <- df[4]
df
# 네이버 뉴스 내용에 대한 리스트 만들기
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
View(df)
# 네이버 뉴스 내용에 대한 리스트 만들기
json_data <- content(doc, type = 'text', encoding = "UTF-8")
json_obj <- fromJSON(json_data)
df <- data.frame(json_obj)
df
df <- df[5]
df
df <- gsub("</?b>", "", df)
df <- gsub("&.+t;", "", df)
df
write(df,"navernews.txt")
API_key  <- "%2BjzsSyNtwmcqxUsGnflvs3rW2oceFvhHR8AFkM3ao%2Fw50hwHXgGyPVutXw04uAXvrkoWgkoScvvhlH7jgD4%2FRQ%3D%3D"
bus_No <- "360"
url <- paste("http://ws.bus.go.kr/api/rest/busRouteInfo/getBusRouteList?ServiceKey=", API_key, "&strSrch=", bus_No, sep="")
doc <- xmlParse(url, encoding="UTF-8")
top <- xmlRoot(doc)
df <- xmlToDataFrame(getNodeSet(doc, "//itemList"))
#View(df)
busRouteId <- df$busRouteId[1]
length <- df$length[1]
stStationNm <- df$stStationNm[1]
edStationNm <- df$edStationNm[1]
term <- df$term[1]
print(busRouteId)
print("노선 길이 : " ,busRouteId)
#bus360 <- data.frame(
#           "노선 ID : " = busRouteId,
#          "노선 길이 : " = length,
#         "기점 : " = stStationNm,
#        "종점 : " = edStationNm,
#       "배차간격 : " = term
#)
#bus360
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
#bus360 <- data.frame(
#           "노선 ID : " = busRouteId,
#          "노선 길이 : " = length,
#         "기점 : " = stStationNm,
#        "종점 : " = edStationNm,
#       "배차간격 : " = term
#)
#bus360
cat("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
#bus360 <- data.frame(
#           "노선 ID : " = busRouteId,
#          "노선 길이 : " = length,
#         "기점 : " = stStationNm,
#        "종점 : " = edStationNm,
#       "배차간격 : " = term
#)
#bus360
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
?seperate
busRouteId
length
stStationNm
edStationNm
term
paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
bus360 <- paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
bus360
bus360 <- strsplit(unlist(bus360), split="\n")
bus360
bus360 <- strsplit(bus360, split="\n")
bus360
bus360 <- paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
bus360 <- strsplit(bus360, split="\n")
bus360
unlist(bus360)
bus360 <- paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
bus360
bus360 <- split(bus360, split="\n")
bus360 <- strsplit(bus360, split="\n")
bus360
unlist(bus360)
print(busRouteId)
bus360 <- paste("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
bus360
cat("[360번 버스정보]", '\n',
"노선 ID : " , busRouteId, '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
length
cat("[360번 버스정보]", '\n',
"노선 ID : " , as.character(busRouteId), '\n',
"노선 길이 : ", length, '\n',
"기점 : " , stStationNm, '\n',
"종점 : " , edStationNm, '\n',
"배차간격 : " , term
)
cat("[360번 버스정보]", '\n',
"노선 ID : " , as.character(busRouteId), '\n',
"노선 길이 : ", as.character(length), '\n',
"기점 : " , as.character(stStationNm), '\n',
"종점 : " , as.character(edStationNm), '\n',
"배차간격 : " , as.character(term)
)
# apply 계열의 함수를 알아보자
weight <- c(65.4, 55, 380, 72.2, 51, NA)
height <- c(170, 155, NA, 173, 161, 166)
gender <- c("M", "F","M","M","F","F")
df <- data.frame(w=weight, h=height)
df
apply(df, 1, sum, na.rm=TRUE) # 함수명 뒤에 오는 아규먼트들은 다 SUM한테 가게된다.
apply(df, 2, sum, na.rm=TRUE)
lapply(df, sum, na.rm=TRUE)
sapply(df, sum, na.rm=TRUE)
tapply(1:6, gender, sum, na.rm=TRUE)
tapply(df$w, gender, mean, na.rm=TRUE)
mapply(paste, 1:5, LETTERS[1:5], month.abb[1:5])
v<-c("abc", "DEF", "TwT")
sapply(v, function(d) paste("-",d,"-", sep=""))
l<-list("abc", "DEF", "TwT")
sapply(l, function(d) paste("-",d,"-", sep=""))
lapply(l, function(d) paste("-",d,"-", sep=""))
length(flower) # 벡터에 들어있는 전체의 데이터(원소) 갯수
flower <- c("rose", "iris", "sunflower", "anemone", "tulip")
length(flower) # 벡터에 들어있는 전체의 데이터(원소) 갯수
nchar(flower) # number of CharacterSet의 줄인말로 각각의 Character 데이터의 문자개수
sapply(flower, function(d) if(nchar(d) > 5) return(d))
sapply(flower, function(d) if(nchar(d) > 5) d)
sapply(flower, function(d) if(nchar(d) > 5) return(d) else return(NA))
sapply(flower, function(d) paste("-",d,"-", sep=""))
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4)
sapply(flower, function(d, n) if(nchar(d) > n) return(d), 4) #여기서 4는 2번째 아규먼트로 전달되는 n에 들어가게 된다.
#function의 첫번째 데이터셋은 정해져 있지만, 2번째 아규먼트 이후는 뒤에서 전달되는 값을 사용하게된다.
sapply(flower, function(d, n=5) if(nchar(d) > n) return(d))
count <- 1
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
length(result)
result
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(100)
}
result <- sapply(df$w, myf)
length(result)
result
result <- sapply(df$w, myf)
length(result)
result
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return()
}
result <- sapply(df$w, myf)
length(result)
result
sapply(df$w, myf, F)
myf <- function(x, wt=T){
print(paste(x,"(",count,")"))
Sys.sleep(3)
if(wt)
r <- paste("*", x, "*")
else
r <- paste("#", x, "#")
count <<- count + 1;
return(r)
}
result <- sapply(df$w, myf)
length(result)
result
sapply(df$w, myf, F)
sapply(df$w, myf, wt=F)
rr1 <- sapply(df$w, myf, wt=F)
str(rr1)
count <- 1
sapply(df, myf)
sapply(df, myf)
v <- sample(1:26)
v
v <- sample(1:26, 10)
v
LETTERS[1:26]
sapply(v,function(x) LETTERS[1:26])
v <- sample(1:26, 10)
sapply(v,function(d) if(v == LETTERS[1:26]))
v <- sample(1:26, 10)
sapply(v,function(d) if(v == LETTERS[1:26]) d)
v <- sample(1:26, 10)
v <- sample(1:26, 10)
sapply(v,function(d) if(v == LETTERS[1:26]) return(d))
v <- sample(1:26, 10)
sapply(v,function(d) if(v == as.numeric(LETTERS[1:26])) return(d))
as.numeric(LETTERS[1:26])
v <- sample(1:26, 10)
sapply(v,function(d) if(LETTERS[v]) return(d))
LETTERS[1]
sapply(v,function(d) LETTERS[v], return(d))
v <- sample(1:26, 10)
sapply(v,function(d) LETTERS[v], return(d))
v <- sample(1:26, 10)
sapply(v,function(d), LETTERS[v] return(d))
sapply(v,function(d) LETTERS[d] return(d))
v <- sample(1:26, 10)
sapply(v,function(d) LETTERS[d] return(d))
sapply(v,function(d) LETTERS(d) return(d))
v <- sample(1:26, 10)
sapply(v,function(v) LETTERS[v] return(v))
sapply(v,function(d) LETTERS[d] return(d))
v <- sample(1:26, 10)
sapply(v,function(d) print(LETTERS[d]) return(d))
sapply(v,function(d) return(LETTERS[d]))
