months(today)
weekdays(today)
(today <- Sys.Date())
weekdays(today)
months(today)
quarters(today)
format(today, "%Y년 %m월 %d일")
format(today, "%d일 %B %Y년") #%B는 04월을 4월로 출력하여준다.
format(today, "%y") # 소문자 y는 연도의 끝2자리
format(today, "%Y") # 대문자 Y는 연도의 4자리
format(today, "%B")
format(today, "%a") # 소문자 a는 '?'요일을 출력
format(today, "%A") # 대문자 A는 '?요일'을 출력
weekdays(today)
months(today)
quarters(today)
quarters(today)
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
unclass(today)  # 1970-01-01을 기준으로 얼마나 날짜가 지났지는 지의 값을 가지고 있다.
quarters(today)
quarters(today)
Sys.Date()
Sys.time()
Sys.timezone()
Sys.timezone()
weekdays(today)
months(today)
quarters(today) #
Sys.Date()
Sys.time()
Sys.timezone()
as.Date('1/15/2018',format='%m/%d/%Y') # format 은 생략 가능
as.Date('4월 26, 2018',format='%B %d, %Y')
as.Date('110228',format='%d%b%y')
as.Date('110228',format='%d%b%y')
as.Date('110228',format='%d%b%y')
as.Date('110228',format='%d%b%y')
as.Date('11 02 28',format='%d %b %y') # 이런식으로 바로 다 붙여서는 인식을 못한다?
as.Date('11 02 28',format='%d %b %y') # 이런식으로 바로 다 붙여서는 인식을 못한다?
as.Date('110228',format='%d%b%y') # 이런식으로 바로 다 붙여서는 인식을 못한다?
as.Date('4월 26, 2018',format='%B %d, %Y')
as.Date('11 02 28',format='%d %b %y') # 이런식으로 바로 다 붙여서는 인식을 못한다?
format(today, "%B")
format(today, "%b")
format(today, "%m")
as.Date('110228',format='%d%m%y') # 이런식으로 바로 다 붙여서는 인식을 못한다?
install.packages("dplyr")
library(dplyr)
library(dplyr)
install.packages("ggplot2")
str(ggplot2::mpg)
head(ggplot2::mpg)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
exam <- read.csv("data/csv_exam.csv")
str(exam)
dim(exam)
head(exam);tail(exam)
View(exam)
# exam에서 class가 1인 경우만 추출하여 출력
exam %>% filter(class == 1) # [참고] 단축키 [Ctrl+Shit+M]으로 %>% 기호 입력
# 2반인 경우만 추출
exam %>% filter(class == 2)
# 1반 이면서 수학 점수가 50점 이상인 경우
exam %>% filter(class == 1 & math >= 50)
# 수학 점수가 90점 이상이거나 영어점수가 90점 이상인 경우
exam %>% filter(math >= 90 | english >= 90)
# %in% 연산자 이용하기
exam %>% filter(class %in% c(1,3,5))  # 1, 3, 5 반에 해당하면 추출
# 추출한 행으로 데이터 만들기
class1 <- exam %>% filter(class == 1)  # class가 1인 행 추출, class1에 할당
class2 <- exam %>% filter(class == 2)  # class가 2인 행 추출, class2에 할당
mean(class1$math)                      # 1반 수학 점수 평균 구하기
mean(class2$math)                      # 2반 수학 점수 평균 구하기
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
#select함수는 select절에 주어지는 컬럼명의 데이타 프레임이 생략된다. 즉, exam$math라고 쓸 필요가 없다.
exam %>% select(math)  # math 추출
exam %>% select(english)  # english 추출
# 여러 변수 추출하기
exam %>% select(class, math, english)  # class, math, english 변수 추출
# 변수 제외하기
exam %>% select(-math)  # math 제외
exam %>% select(-math, -english)  # math, english 제외
# dplyr 함수 조합하기
# class가 1인 행만 추출한 다음 english 추출
exam %>% filter(class == 1) %>% select(english)
# 가독성 있게 줄 바꾸기
exam %>% #  %>%는 절대 앞에 올수 없다. 즉, 다음행이 아닌 그행의 마지막에 적어주어야함.
# %>% 은 Ctrl+Shift+M을 누르면 단축키이다!
filter(class == 1) %>%  # class가 1인 행 추출
select(english)         # english 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head                  # 앞부분 6행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head(10)              # 앞부분 10행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>%  # id, math 추출
head                  # 앞부분 6행까지 추출
iris %>% pull(Species)
iris %>% pull(Species) # Species라고 하는 마지막 변수를 뽑아내고있다.
iris %>% select(Species)
iris %>% pull(Species) # pull은 vector로 꺼내준다.
iris %>% select(Species) # select는 data.frame으로 꺼내준다.
iris %>% select_if(is.numeric)
iris %>% select(-Sepal.Length, -Petal.Length)
# Select column whose name starts with "Petal"
iris %>% select(starts_with("Petal"))
View(iris)
# Select column whose name ends with "Width"
iris %>% select(ends_with("Width"))
# Select columns whose names contains "etal"
iris %>% select(contains("etal"))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
# 오름차순으로 정렬하기
exam %>% arrange(math)  # math 오름차순 정렬
# 정렬 기준 변수 여러개 지정
exam %>% arrange(desc(class), desc(math))  # class 및 math 오름차순 정렬
exam %>% arrange(desc(math)) %>% head(1) # 수학점수가 가장 높은 학생
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
exam %>%   #mutate는 없었던 변수를 추가하는 것이다.
mutate(total = math + english + science)
exam %>%   #mutate는 없었던 새로운 변수를 추가하는 것이다.
mutate(total = math + english + science) %>%  # 총합 변수 추가
head                                          # 일부 추출
#여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = (math + english + science)/3) %>%   # 총평균 변수 추가
head
exam %>%
mutate(total = math + english + science,          # 총합 변수 추가
mean = total/3) %>%   # 총평균 변수 추가
head
# 일부 추출
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head
#추가한 변수를 dplyr 코드에 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%  # 총합 변수 추가
arrange(total) %>%                            # 총합 변수 기준 정렬
head                                          # 일부 추출
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
emp <- read.table("data/emp.csv")
emp
View(emp)
emp <- read.table("data/emp.csv", header=TRUE)
View(emp)
emp <- read.csv("data/emp.csv", header=TRUE)
View(emp)
#[문제1] 업무가 MANAGER 인 직원들의 정보를 출력한다.
emp %>% filter(job == MANAGER)
#[문제1] 업무가 MANAGER 인 직원들의 정보를 출력한다.
emp %>% filter(job == 'MANAGER')
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% filter(empno,ename,'sal')
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% filter('empno','ename','sal')
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% filter(empno,ename,sal)
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% filter(empno,ename,sal)
#[문제2] emp 에서 사번, 이름, 월급을 출력한다.
emp %>% select(empno,ename,sal)
#[문제3] emp 에서 사번만 빼고 출력한다.
emp %>% select(-empno)
#[문제4] emp 에서 ename 과 sal컬럼만 출력한다.
emp %>% select(ename, sal)
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(job)
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(count(job))
count(job)
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(count(job))
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(job)
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(job) %>% count
#[문제5] 업무별 직원수를 출력한다.
emp %>% select(job) %>% count(job)
#[문제6] 월급이 1000 이상이고 3000이하인 사원들의 이름, 월급, 부서번호를 출력한다.
emp %>%  filter(sal >= 1000 & sal <= 3000) %>% select(ename, sal, empno)
#[문제7] emp 에서 업무이 ANALYST 가 아닌 사원들의 이름, 직업, 월급을 출력한다.
emp %>%  filter(job != 'ANALYST') %>% select(ename, sal, empno)
#[문제7] emp 에서 업무이 ANALYST 가 아닌 사원들의 이름, 직업, 월급을 출력한다.
emp %>%  filter(job != 'ANALYST') %>% select(ename, job, sal)
#[문제8] emp 에서 업무가 SALESMAN 이거나 ANALYST 인 사원들의 이름, 직업을 출력한다.
emp %>%  filter(job == 'SALESMAN' & job == 'ANALYST') %>% select(ename, job)
emp %>%  filter(job == 'SALESMAN' & job == 'ANALYST')
#[문제8] emp 에서 업무가 SALESMAN 이거나 ANALYST 인 사원들의 이름, 직업을 출력한다.
emp %>%  filter(job == 'SALESMAN' | job == 'ANALYST') %>% select(ename, job)
#[문제10] 월급이 적은 순으로 모든 직원 정보를 출력한다.
emp %>% arrange(sal)
#[문제11] 월급이 제일 많은 직원의 정보를 출력한다.
emp %>% arrange(desc(sal))
#[문제11] 월급이 제일 많은 직원의 정보를 출력한다.
emp %>% arrange(desc(sal)) %>% head(1)
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
emp %>% mutate(salary <- sal, commrate <- comm)
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
empnew <- emp %>% mutate(salary <- sal, commrate <- comm)
empnew
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
empnew <- emp %>% mutate(salary = sal, commrate = comm)
empnew
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>% mutate(enamelength = length(ename)) %>% arrange(enamelength)
emp %>% mutate(enamelength = length(ename))
t1 <- c(1,2,3,4,5)
length(t1)
t1 <- c("가나다라마바사")
length(t1)
t1 <- c("가나다라마바사")
length(t1)
t1 <- c("가나다라마바사")
length(t1)
emp %>% mutate(enamelength = length(ename))
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>% mutate(enamelength = nchar(ename)) %>% arrange(enamelength)
length(nchar(t1))
t1 <- c("가나다라마바사")
length(nchar(t1))
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
emp %>% mutate(enamelength = nchar(emp$ename)) %>% arrange(enamelength)
emp$ename
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
t1 <- c(emp$ename)
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
t1 <- c(emp$ename)
emp %>% mutate(enamelength = nchar(t1)) %>% arrange(enamelength)
?nachar
?nchar
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
t1 <- nchar(as.vector(emp$ename))
emp %>% mutate(enamelength = nchar(t1)) %>% arrange(enamelength)
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
t1 <- nchar(as.character(emp$ename))
emp %>% mutate(enamelength = nchar(t1)) %>% arrange(enamelength)
#[문제14] 각 직원들 이름의 문자 길이를 저장하는 enamelength 라는 컬럼을 추가한 다음에
#이름 길이가 짧은 순으로 직원의 이름을 출력한다.
t1 <- nchar(as.character(emp$ename))
emp %>% mutate(enamelength = t1) %>% arrange(enamelength)
#[문제12] 직원들의 월급을 보관하고 있는 컬럼의 컬럼명을 sal에서 salary 로 변경하고
#커미션 정보 저장한 컬럼의 컬럼명를 comm 에서 commrate 로 변경한 후
#empnew 라는 새로운 데이터셋을 생성한다.
empnew <- rename(emp, salary = sal, commrate = comm)
empnew
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
# Select columns whose name maches a regular expression
iris %>% select(matches(".t."))
View(iris)
# Select columns whose name maches a regular expression
iris %>% select(matches(".s."))
# Select columns whose name maches a regular expression
iris %>% select(matches(".S."))
# Select columns whose name maches a regular expression
iris %>% select(matches(".p."))
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
x1 <- "2019-01-10 13:30:41"
# 문자열을 날짜형으로
as.Date(x1, "%Y-%m-%d %H:%M:%S")
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S") # format 문자열 지정은 필수
# 문자열을 날짜+시간형으로
strptime(x1, "%Y-%m-%d %H:%M:%S") # format 문자열 지정은 필수
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
?strptime
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
start <- as.Date("2020-01-01")
start
end <- as.Date("2021-01-01")
end
seq(start, end, 1)
seq(start, end, "day")
seq(start, end, "week") #
seq(start, end, "month")
seq(start, end, "year") #
seq(start, end, "3 month") #
seq(start, end, length.out=7)
seq(start, end, length.out=7)
seq(start, end, length.out=7)
x2 <- "20200601"
as.Date(x2, "%Y%m%d")
datetime<-strptime(x2, "%Y%m%d")
str(datetime)
datetime
strptime(x1, "%Y-%m-%d %H:%M:%S") # format 문자열 지정은 필수
strptime('2019-08-21 14:10:30', "%Y-%m-%d %H:%M:%S")
x2 <- "20200601"
as.Date(x2, "%Y%m%d")
datetime<-strptime(x2, "%Y%m%d")
datetime
str(datetime)
as.Date(x2, "%Y%m%d")
datetime<-strptime(x2, "%Y%m%d")
str(datetime)
pct <- as.POSIXct("2020/04/15 11:30:20")
pct
plt <- as.POSIXlt("2020/04/15 11:30:20")
plt
class(pct)
class(plt)
as.integer(pct)
as.integer(plt)
as.integer(pct) # ?
as.integer(plt) # ?
unclass(plt)
plt$sec
plt$min
plt$hour
plt$min
plt$hour
plt$hour
plt$mday
plt$mon # 0 - 1월
plt$mon # 0 - 1월
plt$mon # 0 - 1월
plt$year
plt$year
plt$year
plt$mday
plt$mon # 0 - 1월
plt$year #?
plt$wday # 0-일요일
plt$year #?
t<-Sys.time()
t
ct<-as.POSIXct(t)
ct
lt<-as.POSIXlt(t)
lt
str(ct)
str(lt)
unclass(ct)
unclass(lt)
unclass(ct)
unclass(lt)
unclass(ct)
ct
lt$mon+1
lt$hour
lt$year+1900
plt$year # + 1900
as.POSIXct(1449994438,origin="1970-01-01")
as.POSIXlt(1449994438,origin="1970-01-01")
as.POSIXct(1449994438,origin="1970-01-01")
as.POSIXlt(1449994438,origin="1970-01-01")
#올해의 크리스마스 요일 2가지방법(요일명,숫자)
christmas2<-as.POSIXlt("2020-12-25")
christmas2
weekdays(christmas2)
christmas2$wday
#2020년 1월 1일 어떤 요일
tmp<-as.POSIXct("2020-01-01")
tmp
weekdays(tmp)
#오늘은 xxxx년x월xx일x요일입니다 형식으로 출력
tmp<-Sys.Date()
format(tmp,'오늘은 %Y년 %B %d일 %A입니다')
year<-format(tmp,'%Y')
month<-format(tmp,'%m')
day<-format(tmp,'%d')
weekday<-format(tmp,'%A')
paste("오늘은 ",year,"년 ",month,"월 ",day,"일 ",weekday," 입니다.",sep="")
as.Date("2020/01/01 08:00:00") - as.Date("2020/01/01 05:00:00")
as.Date("2020/01/01 08:00:00") - as.Date("2020/01/01 05:00:00")
as.POSIXct("2020/01/01 08:00:00") - as.POSIXct("2020/01/01 05:00:00")
as.Date("2020/01/01 08:00:00") - as.Date("2020/01/01 05:00:00")
as.POSIXct("2020/01/01 08:00:00") - as.POSIXct("2020/01/01 05:00:00")
as.POSIXlt("2020/01/01 08:00:00") - as.POSIXlt("2020/01/01 05:00:00")
x <- "We have a dream"
nchar(x)
length(x)
y <- c("We", "have", "a", "dream")
length(y)
nchar(y)
nchar(x)
nchar(x)
length(x)
length(y)
nchar(y)
letters
sort(letters, decreasing=TRUE)
fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says)
toupper(fox.says)
fox.says <- "It is only with the HEART that one can See Rightly"
tolower(fox.says) # 전부 소문자로 바꾼다.
toupper(fox.says) # 전부 대문자로 바꾼다.
substr("Data Analytics", start=1, stop=4)
substr("Data Analytics", 6, 14)
substring("Data Analytics", 6)
?substring
classname <- c("Data Analytics", "Data Mining", "Data Visualization")
classname
substr(classname, 1, 4)
countries <- c("Korea, KR", "United States, US", "China, CN")
substr(countries, nchar(countries)-1, nchar(countries))
head(islands)
landmesses <- names(islands)
landmesses
head(islands)
landmesses <- names(islands)
landmesses
grep(pattern="New", x=landmesses)
index <- grep("New", landmesses)
landmesses[index]
# 동일
grep("New", landmesses, value=T)
txt <- "Data Analytics is useful. Data Analytics is also interesting."
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)
x <- c("test1.csv", "test2.csv", "test3.csv", "test4.csv")
x
gsub(".csv", "", x)
words <- c("ct", "at", "bat", "chick", "chae", "cat", "cheanomeles", "chase", "chasse", "mychasse", "cheap", "check", "cheese", "hat", "mycat")
grep("che", words, value=T)
grep("at", words, value=T)
grep("[ch]", words, value=T)
grep("[at]", words, value=T)
grep("ch|at", words, value=T)
grep("ch|at", words, value=T)
sub(pattern="Data", replacement="Business", x=txt)
gsub(pattern="Data", replacement="Business", x=txt)
grep("ch|at", words, value=T)
grep("[ch]", words, value=T) # ?
grep("[at]", words, value=T) # ?
grep("ch|at", words, value=T)
grep("ch(e|i)ck", words, value=T)
grep("chase", words, value=T)
grep("chas?e", words, value=T)
grep("chas*e", words, value=T)
grep("chas+e", words, value=T)
grep("ch(a*|e*)se", words, value=T)
grep("^c", words, value=T)
grep("t$", words, value=T)
grep("^c.*t$", words, value=T)
words2 <- c("12 Dec", "OK", "http//",
"<TITLE>Time?</TITLE>",
"12345", "Hi there")
grep("[[:alnum:]]", words2, value=TRUE)
grep("[[:alpha:]]", words2, value=TRUE)
grep("[[:digit:]]", words2, value=TRUE)
grep("[[:punct:]]", words2, value=TRUE)
grep("[[:space:]]", words2, value=TRUE)
grep("\\w", words2, value=TRUE)
grep("\\d", words2, value=TRUE)
grep("\\s", words2, value=TRUE)
fox.said <- "What is essential is invisible to the eye"
fox.said
strsplit(x= fox.said, split="")
strsplit(x= fox.said, split= " ")
strsplit(x= fox.said, split=" ")
strsplit(x= fox.said, split="")
fox.said.words <- unlist(strsplit(fox.said, " "))
fox.said.words
fox.said.words <- strsplit(fox.said, " ")[[1]]
fox.said.words
fox.said.words[3]
p1 <- "You come at four in the afternoon, than at there I shall begin to the  happy"
p2 <- "One runs the risk of weeping a little, if one lets himself be tamed"
p3 <- "What makes the desert beautiful is that somewhere it hides a well"
littleprince <- c(p1, p2, p3)
littleprince
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]]
strsplit(littleprince, " ")
strsplit(littleprince, " ")[[3]]
strsplit(littleprince, " ")[[3]][5]
